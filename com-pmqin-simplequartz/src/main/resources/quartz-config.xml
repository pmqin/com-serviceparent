<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-4.1.xsd
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
           http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-4.1.xsd"
			>
<!--     <context:annotation-config/> -->
	<!--引入配置属性文件 -->
	<!-- <context:property-placeholder location="classpath:/*.properties" 
		/> -->
	<!-- 要调用的工作类 -->
<!-- 	 这中方式配置简单,但是存在问题 -->
<!-- 1.定时任务信息都报错在内存中,服务器重启会丢失信息 -->
<!-- 2.每个定时任务都是一串配置,定时任务多了不好管理 -->
<!-- 3.任务时间修改后要重新发布项目 -->
	<bean id="quartzJob" class="com.pmqin.simplequartz.Quartzjob"></bean>

	<!-- 定义调用对象和调用对象的方法 -->
	<bean id="jobtask"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 调用的类 -->
		<property name="targetObject">
			<ref bean="quartzJob" />
		</property>
		<!-- 调用类中的方法 -->
		<property name="targetMethod">
			<value>work</value>
		</property>

	</bean>

	<!-- 定义触发时间 我用这个有问题 spring+quartz(各种版本兼容性问题)  https://my.oschina.net/lianlupeng/blog/363143
	class="org.springframework.scheduling.quartz.CronTriggerBean"> -->
	<bean id="doTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail">
			<ref bean="jobtask" />
		</property>
		<!-- cron表达式 -->
		<property name="cronExpression">
			<!-- 5秒执行一次 -->
			<value>0/5 * * * * ?</value>
		</property>
	</bean>

	<!-- 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序 
缺省autowire为no,则没有dataSource bean被注入,quartz会认为项目没连数据库,会PASS这个访问管理表的功能.
当你配置了default-autowire=byName时, dataSource bean被自动注入, 这时quartz认为项目既然能连到数据库
	-->
	<bean id="startQuertz" lazy-init="false" autowire="no"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
<!-- 		 <property name="quartzProperties"> -->
<!--             <props> -->
<!--                 <prop key="org.quartz.jobStore.dataSource">${quartz.jobStore.dataSource}</prop> -->
<!--                 <prop key="org.quartz.dataSource.quartzDataSource.driver">${dataSource.driverClassName}</prop> -->
<!--                 <prop key="org.quartz.dataSource.quartzDataSource.URL">${dataSource.url}</prop> -->
<!--                 <prop key="org.quartz.dataSource.quartzDataSource.user">${dataSource.username}</prop> -->
<!--                 <prop key="org.quartz.dataSource.quartzDataSource.password">${dataSource.password}</prop> -->
<!--                 <prop key="org.quartz.dataSource.quartzDataSource.validationQuery">${quartz.dataSource.validationQuery}</prop> -->
<!--                 <prop key="org.quartz.dataSource.quartzDataSource.validateOnCheckout">${quartz.dataSource.validateOnCheckout}</prop> -->

<!--                 线程池配置 -->
<!--                 <prop key="org.quartz.threadPool.class">${quartz.threadPool.class}</prop> -->
<!--                 <prop key="org.quartz.threadPool.threadCount">${quartz.threadPool.threadCount}</prop> -->
<!--                 <prop key="org.quartz.threadPool.threadPriority">${quartz.threadPool.threadPriority}</prop> -->

<!--                 cluster -->
<!--                 <prop key="org.quartz.jobStore.tablePrefix">${quartz.jobStore.tablePrefix}</prop> -->
<!--                 <prop key="org.quartz.jobStore.isClustered">${quartz.jobStore.isClustered}</prop> -->
<!--                 <prop key="org.quartz.jobStore.clusterCheckinInterval">${quartz.jobStore.clusterCheckinInterval}</prop> -->
<!--                 <prop key="org.quartz.jobStore.misfireThreshold">${quartz.jobStore.misfireThreshold}</prop> -->
<!--                 <prop key="org.quartz.jobStore.driverDelegateClass">${quartz.jobStore.driverDelegateClass}</prop> -->
<!--                 <prop key="org.quartz.jobStore.class">${quartz.jobStore.class}</prop> -->
<!--                 <prop key="org.quartz.scheduler.instanceId">${quartz.scheduler.instanceId}</prop> -->
<!--                 <prop key="org.quartz.scheduler.skipUpdateCheck">${quartz.scheduler.skipUpdateCheck}</prop> -->
<!--                 <prop key="org.quartz.scheduler.classLoadHelper.class">${quartz.scheduler.classLoadHelper.class}</prop> -->
<!--             </props> -->
<!--         </property> -->
<!--         必须的，QuartzScheduler 延时启动，应用启动完后 QuartzScheduler 再启动 -->
<!--         <property name="startupDelay" value="${quartz.scheduler.startupDelay}" /> -->
		
		<property name="triggers">
			<list>
				<ref bean="doTrigger" />
				<!--    <ref local="doTrigger"/> 两者都可以用 -->
			</list>
		</property>
		<property name="taskExecutor" ref="executor" />
       <!-- 	property name="configLocation" value="classpath:quartz.properties"   -->
	</bean>
	<!-- 线程执行器配置，用于任务注册  这个也可以不配置就是控制调度器的线程池数量  設置在 SchedulerFactoryBean上面-->
	<bean id="executor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="10" />
		<property name="maxPoolSize" value="100" />
		<property name="queueCapacity" value="500" />
	</bean>
<!-- 	延迟10秒启动，然后每隔1分钟执行一次。 -->
<!-- 	<bean id="taskTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean"> -->
<!--  <property name="jobDetail" ref="jobtask" /> -->
<!--  <property name="startDelay" value="10000" /> -->
<!--  <property name="repeatInterval" value="60000" /> -->
<!-- </bean> -->


</beans>